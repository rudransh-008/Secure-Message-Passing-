{"ast":null,"code":"var _jsxFileName = \"/Users/rudranshgupta/Desktop/dappcord/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { io } from \"socket.io-client\";\nimport Navigation from './components/Navigation';\nimport Servers from './components/Servers';\nimport Channels from './components/Channels';\nimport Messages from './components/Messages';\nimport Dappcord from './abis/Dappcord.json';\nimport config from './config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('ws://localhost:3030');\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [dappcord, setDappcord] = useState(null);\n  const [channels, setChannels] = useState([]);\n  const [currentChannel, setCurrentChannel] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n    const network = await provider.getNetwork();\n    const dappcord = new ethers.Contract(config[network.chainId].Dappcord.address, Dappcord, provider);\n    setDappcord(dappcord);\n    const totalChannels = await dappcord.totalChannels();\n    const channels = [];\n    for (var i = 1; i <= totalChannels; i++) {\n      const channel = await dappcord.getChannel(i);\n      channels.push(channel);\n    }\n    setChannels(channels);\n    window.ethereum.on('accountsChanged', async () => {\n      window.location.reload();\n    });\n  };\n  useEffect(() => {\n    loadBlockchainData();\n    socket.on(\"connect\", () => {\n      socket.emit('get messages');\n    });\n    socket.on('new message', messages => {\n      setMessages(messages);\n    });\n    socket.on('get messages', messages => {\n      setMessages(messages);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('new message');\n      socket.off('get messages');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(Servers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Channels, {\n        provider: provider,\n        account: account,\n        dappcord: dappcord,\n        channels: channels,\n        currentChannel: currentChannel,\n        setCurrentChannel: setCurrentChannel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        account: account,\n        messages: messages,\n        currentChannel: currentChannel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ueBpCsRS88Y2CrZdSd2MuoYq5Cc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","io","Navigation","Servers","Channels","Messages","Dappcord","config","socket","App","provider","setProvider","account","setAccount","dappcord","setDappcord","channels","setChannels","currentChannel","setCurrentChannel","messages","setMessages","loadBlockchainData","providers","Web3Provider","window","ethereum","network","getNetwork","Contract","chainId","address","totalChannels","i","channel","getChannel","push","on","location","reload","emit","off"],"sources":["/Users/rudranshgupta/Desktop/dappcord/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { io } from \"socket.io-client\"\n\nimport Navigation from './components/Navigation'\nimport Servers from './components/Servers'\nimport Channels from './components/Channels'\nimport Messages from './components/Messages'\n\nimport Dappcord from './abis/Dappcord.json'\n\nimport config from './config.json';\n\nconst socket = io('ws://localhost:3030');\n\nfunction App() {\n  const [provider, setProvider] = useState(null)\n  const [account, setAccount] = useState(null)\n\n  const [dappcord, setDappcord] = useState(null)\n  const [channels, setChannels] = useState([])\n\n  const [currentChannel, setCurrentChannel] = useState(null)\n  const [messages, setMessages] = useState([])\n\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    setProvider(provider)\n\n    const network = await provider.getNetwork()\n    const dappcord = new ethers.Contract(config[network.chainId].Dappcord.address, Dappcord, provider)\n    setDappcord(dappcord)\n\n    const totalChannels = await dappcord.totalChannels()\n    const channels = []\n\n    for (var i = 1; i <= totalChannels; i++) {\n      const channel = await dappcord.getChannel(i)\n      channels.push(channel)\n    }\n\n    setChannels(channels)\n\n    window.ethereum.on('accountsChanged', async () => {\n      window.location.reload()\n    })\n  }\n\n  useEffect(() => {\n    loadBlockchainData()\n\n    socket.on(\"connect\", () => {\n      socket.emit('get messages')\n    })\n\n    socket.on('new message', (messages) => {\n      setMessages(messages)\n    })\n\n    socket.on('get messages', (messages) => {\n      setMessages(messages)\n    })\n\n    return () => {\n      socket.off('connect')\n      socket.off('new message')\n      socket.off('get messages')\n    }\n  }, [])\n\n  return (\n    <div>\n      <Navigation account={account} setAccount={setAccount} />\n\n      <main>\n        <Servers />\n\n        <Channels\n          provider={provider}\n          account={account}\n          dappcord={dappcord}\n          channels={channels}\n          currentChannel={currentChannel}\n          setCurrentChannel={setCurrentChannel}\n        />\n\n        <Messages account={account} messages={messages} currentChannel={currentChannel} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}